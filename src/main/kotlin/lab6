package lab6


interface IActt {
    fun attachCustomer(customer: Customer)
    fun detachCustomer(customer: Customer)
    fun notifyCustomers()
}


class AccountProxy : IActt {
    private val customers = mutableListOf<Customer>()
    var balance: Int = 0

    override fun attachCustomer(customer: Customer) {
        customers.add(customer)
    }

    override fun detachCustomer(customer: Customer) {
        customers.remove(customer)
    }

    override fun notifyCustomers() {
        customers.forEach { it.notify(this) }
    }

    // Other methods and logic for account management

    fun deposit(amount: Int) {
        balance += amount
        notifyCustomers()
    }
}

interface Customer {
    fun notify(accountProxy: AccountProxy)
    fun withdraw(amount: Int)
}


class BankCustomer(private val name: String) : Customer {
    override fun notify(accountProxy: AccountProxy) {
        println("$name, you have received a money transfer. Your new balance is: ${accountProxy.balance}")
        withdraw(50)
    }

    override fun withdraw(amount: Int) {
        println("$name is withdrawing $amount from the account.")
    }
}

fun main() {
    val account = AccountProxy()

    val customer1 = BankCustomer("John")
    val customer2 = BankCustomer("Alice")

    account.attachCustomer(customer1)
    account.attachCustomer(customer2)

    account.deposit(1000)


    account.detachCustomer(customer1)
    account.deposit(500)
}
